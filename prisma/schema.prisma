// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user") // "admin" | "user"
  avatar    String?
  bio       String?
  posts     Post[]
  comments  Comment[]
  sentMessages     Message[] @relation("Sender")
  receivedMessages Message[] @relation("Receiver")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?
  color       String @default("#3B82F6")
  posts       Post[]
  createdAt   DateTime @default(now())

  @@map("categories")
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  excerpt    String?
  slug       String   @unique
  published  Boolean  @default(false)
  featured   Boolean  @default(false)
  imageUrl   String?
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  comments   Comment[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  createdAt DateTime @default(now())

  @@map("comments")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("messages")
}
